"use client";

import { useState, useEffect, useCallback } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Badge } from "@/components/ui/badge";
import { Separator } from "@/components/ui/separator";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { toast } from "sonner";

import { 
  Archive,
  Search,
  RotateCcw,
  Trash2,
  Eye,
  Calendar,
  Link2,
  FolderOpen,
  Download,
  Loader2,
  RefreshCw
} from "lucide-react";

// Types moved from server actions to avoid bundling issues
export interface ArchivedLink {
  id: string;
  title: string;
  url: string;
  archivedAt: Date;
  originalClicks: number;
  reason?: string;
  userId: string;
}

export default function ViewArchivePage() {
  const [searchQuery, setSearchQuery] = useState("");
  const [archivedLinks, setArchivedLinks] = useState<ArchivedLink[]>([]);
  const [stats, setStats] = useState({
    archivedLinksCount: 0,
    archivedLinksClicks: 0,
    totalLinksCount: 0,
    activeLinksCount: 0,
    archiveRatio: 0
  });
  const [isLoading, setIsLoading] = useState(true);
  const [operationLoading, setOperationLoading] = useState<string | null>(null);
  const [isRefreshing, setIsRefreshing] = useState(false);

  // Load data function
  const loadData = useCallback(async () => {
    try {
      const response = await fetch('/api/archive');
      if (!response.ok) {
        throw new Error('Failed to fetch archive data');
      }
      
      const data = await response.json();
      setArchivedLinks(data.links);
      setStats(data.stats);
    } catch (error) {
      console.error("Error loading archive data:", error);
      toast.error("Failed to load archive data", {
        description: error instanceof Error ? error.message : "Unknown error occurred"
      });
    }
  }, []);

  // Manual refresh with loading indicator
  const handleManualRefresh = async () => {
    setIsRefreshing(true);
    try {
      await loadData();
      toast.success("Archive data refreshed");
    } catch {
      toast.error("Failed to refresh data");
    } finally {
      setIsRefreshing(false);
    }
  };

  // Load data on component mount and set up real-time updates
  useEffect(() => {
    const fetchData = async () => {
      try {
        const response = await fetch('/api/archive');
        if (!response.ok) {
          throw new Error('Failed to fetch archive data');
        }
        
        const data = await response.json();
        setArchivedLinks(data.links);
        setStats(data.stats);
      } catch (error) {
        console.error("Error loading archive data:", error);
        toast.error("Failed to load archive data", {
          description: error instanceof Error ? error.message : "Unknown error occurred"
        });
      } finally {
        setIsLoading(false);
      }
    };

    fetchData();
    
    // Set up polling for real-time updates every 30 seconds
    const interval = setInterval(fetchData, 30000);
    
    return () => clearInterval(interval);
  }, []);

  const handleRestore = async (linkId: string) => {
    setOperationLoading(linkId);
    try {
      const response = await fetch('/api/archive/update', {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          action: 'restore',
          linkId
        })
      });
      
      if (response.ok) {
        const result = await response.json();
        toast.success("Link restored successfully", {
          description: result.message
        });
        await loadData(); // Refresh data
      } else {
        const error = await response.json();
        throw new Error(error.error);
      }
    } catch (error) {
      toast.error("Failed to restore link", {
        description: error instanceof Error ? error.message : "Unknown error occurred"
      });
    } finally {
      setOperationLoading(null);
    }
  };

  const handleDelete = async (linkId: string) => {
    if (!confirm("Are you sure? This will permanently delete the link and cannot be undone.")) {
      return;
    }
    
    setOperationLoading(linkId);
    try {
      const response = await fetch('/api/archive/update', {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          action: 'delete',
          linkId
        })
      });
      
      if (response.ok) {
        const result = await response.json();
        toast.success("Link deleted permanently", {
          description: result.message
        });
        await loadData(); // Refresh data
      } else {
        const error = await response.json();
        throw new Error(error.error);
      }
    } catch (error) {
      toast.error("Failed to delete link", {
        description: error instanceof Error ? error.message : "Unknown error occurred"
      });
    } finally {
      setOperationLoading(null);
    }
  };

  const handleExport = async (format: 'json' | 'csv' = 'json') => {
    try {
      const response = await fetch('/api/archive/update', {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          action: 'export',
          format
        })
      });
      
      if (response.ok) {
        const result = await response.json();
        if (result.data) {
          // Create downloadable file
          const blob = new Blob([result.data], { type: result.contentType });
          const url = URL.createObjectURL(blob);
          const a = document.createElement('a');
          a.href = url;
          a.download = result.filename || `archive-export.${format}`;
          document.body.appendChild(a);
          a.click();
          document.body.removeChild(a);
          URL.revokeObjectURL(url);
          
          toast.success(`Export successful`, {
            description: `Archive data exported as ${format.toUpperCase()}`
          });
        }
      } else {
        const error = await response.json();
        throw new Error(error.error);
      }
    } catch (error) {
      toast.error("Export failed", {
        description: error instanceof Error ? error.message : "Failed to export data"
      });
    }
  };

  // Filter links based on search query
  const filteredLinks = archivedLinks.filter(link =>
    link.title.toLowerCase().includes(searchQuery.toLowerCase()) ||
    link.url.toLowerCase().includes(searchQuery.toLowerCase()) ||
    (link.reason && link.reason.toLowerCase().includes(searchQuery.toLowerCase()))
  );

  if (isLoading) {
    return (
      <div className="container mx-auto p-6">
        <div className="flex items-center justify-center h-64">
          <Loader2 className="h-8 w-8 animate-spin" />
          <span className="ml-2">Loading archive data...</span>
        </div>
      </div>
    );
  }

  return (
    <div className="container mx-auto py-6 max-w-6xl">
      <div className="mb-8">
        <h1 className="text-3xl font-bold text-gray-900 dark:text-gray-100 flex items-center gap-3">
          <Archive className="h-8 w-8" />
          Archive
        </h1>
        <p className="text-gray-600 dark:text-gray-400 mt-2">
          View and manage your archived links, collections, and analytics data
        </p>
      </div>

      {/* Stats Cards */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-4 mb-6">
        <Card>
          <CardContent className="p-4">
            <div className="text-2xl font-bold text-primary">{stats.archivedLinksCount}</div>
            <p className="text-sm text-muted-foreground">Archived Links</p>
          </CardContent>
        </Card>
        <Card>
          <CardContent className="p-4">
            <div className="text-2xl font-bold text-primary">{stats.archivedLinksClicks.toLocaleString()}</div>
            <p className="text-sm text-muted-foreground">Total Clicks</p>
          </CardContent>
        </Card>
        <Card>
          <CardContent className="p-4">
            <div className="text-2xl font-bold text-primary">{stats.activeLinksCount}</div>
            <p className="text-sm text-muted-foreground">Active Links</p>
          </CardContent>
        </Card>
        <Card>
          <CardContent className="p-4">
            <div className="text-2xl font-bold text-primary">{stats.archiveRatio.toFixed(1)}%</div>
            <p className="text-sm text-muted-foreground">Archive Ratio</p>
          </CardContent>
        </Card>
      </div>

      {/* Search and Filter */}
      <div className="mb-6 flex flex-col sm:flex-row gap-4">
        <div className="relative flex-1">
          <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground" />
          <Input
            placeholder="Search archived items..."
            value={searchQuery}
            onChange={(e) => setSearchQuery(e.target.value)}
            className="pl-10"
          />
        </div>
        <div className="flex gap-2">
          <Button 
            variant="outline" 
            size="sm" 
            onClick={handleManualRefresh}
            disabled={isRefreshing}
          >
            <RefreshCw className={`h-4 w-4 mr-2 ${isRefreshing ? 'animate-spin' : ''}`} />
            {isRefreshing ? 'Refreshing...' : 'Refresh'}
          </Button>
          <Button variant="outline" size="sm" onClick={() => handleExport('json')}>
            <Download className="h-4 w-4 mr-2" />
            Export JSON
          </Button>
          <Button variant="outline" size="sm" onClick={() => handleExport('csv')}>
            <Download className="h-4 w-4 mr-2" />
            Export CSV
          </Button>
        </div>
      </div>

      <Tabs defaultValue="links" className="space-y-6">
        <TabsList className="grid w-full grid-cols-3">
          <TabsTrigger value="links">Archived Links</TabsTrigger>
          <TabsTrigger value="collections">Archived Collections</TabsTrigger>
          <TabsTrigger value="analytics">Archived Analytics</TabsTrigger>
        </TabsList>

        <TabsContent value="links" className="space-y-4">
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center justify-between">
                <span className="flex items-center gap-2">
                  <Link2 className="h-5 w-5" />
                  Archived Links ({filteredLinks.length})
                </span>
                <Badge variant="secondary">
                  Total Clicks: {filteredLinks.reduce((sum, link) => sum + link.originalClicks, 0)}
                </Badge>
              </CardTitle>
            </CardHeader>
            <CardContent>
              {filteredLinks.length === 0 ? (
                <div className="text-center py-8">
                  <Archive className="h-12 w-12 text-muted-foreground mx-auto mb-4" />
                  <h3 className="text-lg font-medium text-muted-foreground mb-2">No archived links</h3>
                  <p className="text-sm text-muted-foreground">
                    {searchQuery ? "No links match your search criteria" : "You haven't archived any links yet"}
                  </p>
                </div>
              ) : (
                <div className="space-y-4">
                  {filteredLinks.map((link) => (
                    <div key={link.id} className="border rounded-lg p-4">
                      <div className="flex items-start justify-between mb-3">
                        <div className="flex-1 min-w-0">
                          <h3 className="font-medium text-gray-900 dark:text-gray-100">
                            {link.title}
                          </h3>
                          <p className="text-sm text-muted-foreground truncate">
                            {link.url}
                          </p>
                          {link.reason && (
                            <p className="text-xs text-muted-foreground mt-1">
                              Reason: {link.reason}
                            </p>
                          )}
                        </div>
                        <div className="text-right">
                          <Badge variant="outline">{link.originalClicks} clicks</Badge>
                        </div>
                      </div>
                      
                      <Separator className="my-3" />
                      
                      <div className="flex items-center justify-between">
                        <div className="flex items-center gap-2 text-sm text-muted-foreground">
                          <Calendar className="h-3 w-3" />
                          Archived on {new Date(link.archivedAt).toLocaleDateString()}
                        </div>
                        <div className="flex gap-2">
                          <Button 
                            size="sm" 
                            variant="outline"
                            onClick={() => handleRestore(link.id)}
                            disabled={operationLoading === link.id}
                          >
                            {operationLoading === link.id ? (
                              <Loader2 className="h-3 w-3 mr-1 animate-spin" />
                            ) : (
                              <RotateCcw className="h-3 w-3 mr-1" />
                            )}
                            Restore
                          </Button>
                          <Button 
                            size="sm" 
                            variant="destructive"
                            onClick={() => handleDelete(link.id)}
                            disabled={operationLoading === link.id}
                          >
                            {operationLoading === link.id ? (
                              <Loader2 className="h-3 w-3 mr-1 animate-spin" />
                            ) : (
                              <Trash2 className="h-3 w-3 mr-1" />
                            )}
                            Delete
                          </Button>
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="collections" className="space-y-4">
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <FolderOpen className="h-5 w-5" />
                Archived Collections (Coming Soon)
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className="text-center py-8">
                <FolderOpen className="h-12 w-12 text-muted-foreground mx-auto mb-4" />
                <h3 className="text-lg font-medium text-muted-foreground mb-2">Collections Feature</h3>
                <p className="text-sm text-muted-foreground">
                  Link collections archiving will be available in a future update
                </p>
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="analytics" className="space-y-4">
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Eye className="h-5 w-5" />
                Archived Analytics (Coming Soon)
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className="text-center py-8">
                <Eye className="h-12 w-12 text-muted-foreground mx-auto mb-4" />
                <h3 className="text-lg font-medium text-muted-foreground mb-2">Analytics Archive</h3>
                <p className="text-sm text-muted-foreground">
                  Historical analytics archiving will be available in a future update
                </p>
              </div>
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>

      {/* Archive Information */}
      <Card className="mt-8">
        <CardHeader>
          <CardTitle>Archive Information</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-6 text-sm">
            <div>
              <h4 className="font-medium mb-2">Retention Policy</h4>
              <ul className="space-y-1 text-muted-foreground">
                <li>• Archived items can be restored anytime</li>
                <li>• Export data before permanent deletion</li>
                <li>• Restored items maintain original analytics</li>
              </ul>
            </div>
            <div>
              <h4 className="font-medium mb-2">Available Actions</h4>
              <ul className="space-y-1 text-muted-foreground">
                <li>• Restore to active status</li>
                <li>• Export as CSV/JSON</li>
                <li>• Permanent deletion</li>
              </ul>
            </div>
            <div>
              <h4 className="font-medium mb-2">Live Statistics</h4>
              <ul className="space-y-1 text-muted-foreground">
                <li>• {stats.archivedLinksCount} archived links</li>
                <li>• {stats.activeLinksCount} active links</li>
                <li>• {stats.totalLinksCount} total links</li>
              </ul>
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  );
}
